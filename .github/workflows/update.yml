name: Update addons data
on:
    push:
        branches: main
    workflow_dispatch:
        inputs:
            Version:
                required: false
                type: string
    schedule:
        - cron: 30 11/12 * * *

permissions: write-all

jobs:
    update:
        name: Update
        runs-on: ubuntu-24.04

        steps:
            - name: Clone
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
              with:
                  repository: ScratchAddons/ScratchAddons
                  sparse-checkout: |
                      addons/*/addon.json
                      addons/addons.json
                      LICENSE
                      manifest.json
                  sparse-checkout-cone-mode: false
                  fetch-tags: true
                  fetch-depth: 0

            - name: Get version
              run:
                  echo "VERSION=${{ inputs.Version || '$(git describe --tags $(git rev-list --tags
                  --max-count=1))' }}" >> "$GITHUB_ENV"

            - name: Check version
              id: check_version
              run: |
                  if [[ "v$(npm view @sa-community/addons-data version)" == "$VERSION"* ]]; then
                      echo "No new version"
                      echo "new_version=false" >> "$GITHUB_OUTPUT"
                  else
                      echo "New version found"
                      echo "new_version=true" >> "$GITHUB_OUTPUT"
                  fi

            - name: Checkout
              if: steps.check_version.outputs.new_version == 'true'
              run: git checkout "$VERSION"

            - name: Generate addons.js
              run: |
                  echo "module.exports = [" > addons.js
                  jq -r '.[] | select(type == "string" and startswith("//") | not) | "{addonId: \"\(.)\", manifest: require(\"./addons/\(.).js\")}"' addons/addons.json | sed 's/$/,/' >> addons.js
                  echo "];" >> addons.js
                  rm addons/addons.json

            - name: Generate manifests
              run: |
                  HEADER='/** @satisfies {import("../../types.d.ts").AddonManifest} */\nconst addon = '
                  FOOTER=';\nmodule.exports = addon;'

                  find . -type f -name "addon.json" | while read -r json_file; do
                    js_file="$(dirname "$json_file").js"
                    echo -e "$HEADER$(cat "$json_file")$FOOTER" > "$js_file"
                    rm "$json_file"
                  done

            - name: Checkout
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
              with:
                  path: script

            - name: Move types
              run: mv script/types.d.ts types.d.ts

            - if: steps.check_version.outputs.new_version == 'true'
              run:
                  echo $(cat script/package.json | sed "s/VERSION/$(echo $VERSION | sed 's/v//')/")
                  > package.json

            - name: Setup Node.JS
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
              with:
                  node-version: 22.14.0
                  registry-url: "https://registry.npmjs.org"

            - name: Publish
              if: steps.check_version.outputs.new_version == 'true'
              run: npm publish --provenance --access public
              working-directory: dist
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Run typecheck
              id: typecheck
              continue-on-error: true
              run: |
                  cd script
                  npm ci
                  npx tsc ../addons.js --allowJs --checkJs --noEmit --strict > typecheck.log || true
                  if [[ -s typecheck.log ]]; then
                    echo "has_errors=true" >> $GITHUB_OUTPUT
                    echo "LOG<<EOF" >> $GITHUB_OUTPUT
                    head -c 64000 typecheck.log >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT
                  else
                    echo "has_errors=false" >> $GITHUB_OUTPUT
                  fi

            - name: Create or comment on issue
              if: steps.typecheck.outputs.has_errors == 'true'
              uses: ovsds/create-or-update-unique-issue-action@8999e391f74f20449dcc70e94aee731a3938d543 # v1.1.0
              with:
                  title: ðŸš¨ Typecheck Failed in CI
                  unique-title-includes: ðŸš¨ Typecheck Failed in CI
                  body: "```\n${{ steps.typecheck.outputs.LOG }}\n```"

            - name: Close issue if typecheck passed
              if: steps.typecheck.outputs.has_errors == 'false'
              uses: lee-dohm/close-matching-issues@e9e43aad2fa6f06a058cedfd8fb975fd93b56d8f # v2.1.0
              with:
                  query: "ðŸš¨ Typecheck Failed in CI is:open author:app/github-actions"
                  token: ${{ secrets.GITHUB_TOKEN }}
